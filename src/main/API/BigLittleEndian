/**
 * 1) Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。
 * 2) Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。
 *
 *
 * 举一个例子，比如数字0x12 34 56 78在内存中的表示形式为：
 *
 * 1)大端模式：
 *
 * 低地址 -----------------> 高地址
 * 0x12  |  0x34  |  0x56  |  0x78
 *
 * 2)小端模式：
 *
 * 低地址 ------------------> 高地址
 * 0x78  |  0x56  |  0x34  |  0x12
 *
 * 可见，大端模式和字符串的存储模式类似。
 *
 *
 *
 *
 *
 * 将小端bytes数据转化为大端数据
 * <p>
 * 默认网络传输字节为大端，java 全部为大端（与平台无关）
 * 关于 “Little-Endian and Big-Endian”,详情请参考：
 *
 * @param bytes
 * @return 转化后得到的整数
 * @Link https://howtodoinjava.com/java/basics/little-endian-and-big-endian-in-java/
 * </p>
 */
private int bytesToBigEndian(byte[] bytes) {

        int result = 0;
        if (bytes == null || bytes.length < 0)  return -1;

        ByteBuffer buffer = ByteBuffer.wrap(bytes);
        buffer.order(ByteOrder.BIG_ENDIAN);

        if (bytes.length == RECORD_BYTES_SIZE) {
            result = buffer.getInt();
        }
        else if (bytes.length == PORT_BYTES_SIZE) {
        // 端口号：0 ~ 65535; Short: -32768 ~ 32767
            short tmp = buffer.getShort();
            result = tmp < 0 ? getUnsignedShort(tmp) : tmp;
        }
        if (result < 0) {
            logger.info("Length = " + result + " ; original data:" + bytes);
        }
        return result;
}