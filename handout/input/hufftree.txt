/**
 * 学号：516051910027
 * 姓名：苑齐超
 */

import java.io.*;
import java.util.*;

// Sort by count: largest in head
class SortCharByCount implements Comparator<CharRecord> {
    @Override
    public int compare(CharRecord o1, CharRecord o2) {
        if (o1.getCount() > o2.getCount()) {
            return -1;
        }
        else if (o1.getCount() < o2.getCount()) {
            return 0;
        }
        else if (o1.getCount() == o2.getCount()) {
            if (o1.getKeyword() < (o2.getKeyword())) {
                return -1;
            }
        }
        return 0;
    }
}

public class Huffman {

    static Set<Character> characterSet = new HashSet<>();
    static List<CharRecord> freqTable = new ArrayList<>();
    static CharRecord huffmanTree = new CharRecord();



    public static void do_statistics(String fileName) {
        File file = new File(fileName);
        Reader reader = null;
        try {
            //System.out.println("以字符为单位读取文件内容，一次读一个字节：");
            // 一次读一个字符
            reader = new InputStreamReader(new FileInputStream(file));
            int tempchar;
            while ((tempchar = reader.read()) != -1) {
                // 如果已经遇到过这个字符
                if (characterSet.contains((char) tempchar)) {
                    for (CharRecord charRecord : freqTable) {
                        if (charRecord.getKeyword() == (char) tempchar) {
                            charRecord.addCount(1);
                            break;
                        }
                    }
                }
                // 如果没有遇到过
                else {
                    characterSet.add((char) tempchar);
                    CharRecord charRecord = new CharRecord((char) tempchar, 1);
                    freqTable.add(charRecord);
                }

            }
            reader.close();
            // 表示输入文件中共出现过多少种不同的 ASCII 字符
            System.out.println(characterSet.size());

            // 根据出现次数 重排序
            freqTable.sort(new SortCharByCount());
            // 文件中出现次数最多的三个字符和它们的出现个数
            for (int i=0; i<3; i++) {
                System.out.println(freqTable.get(i).getKeyword()+ " " + freqTable.get(i).getCount());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void build_tree() {
        while (freqTable.size() != 1) {
            CharRecord leftChild = freqTable.get(freqTable.size()-1);
            CharRecord rightChild = freqTable.get(freqTable.size()-2);
            CharRecord father = new CharRecord();
            father.setKeyword(leftChild.getKeyword());
            father.setCount(leftChild.getCount() + rightChild.getCount());
            father.setLeft(leftChild);
            father.setRight(rightChild);
        }
        huffmanTree = freqTable.get(0);
    }


    public static void main(String[] args) {
        do_statistics("/home/icyfrog/Documents/input/demo.txt");
        build_tree();
        System.out.println("KeyWord \t" + huffmanTree.getKeyword());
        System.out.println("the w is : \t " + huffmanTree.getCount());
        System.out.println("father's left \t" + huffmanTree.getLeft().getKeyword());
    }
}
